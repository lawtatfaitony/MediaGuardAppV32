#####################################################################
#
# @brief	CMakeLists of project 
# cmake ../ -G "Visual Studio 17 2022"
# cmake ../ -G "Unix Makefiles"
# 
#####################################################################
cmake_minimum_required (VERSION 3.8)
 
# HEADER START ------------------------------------------------------------------

message("MediaGuard----------------------------------------------------------------------------------------------")
message("CMAKE_CURRENT_SOURCE_DIR = " ${CMAKE_CURRENT_SOURCE_DIR})  
message("MediaGuard----------------------------------------------------------------------------------------------")
   
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
#set project name
set(PROJECT_NAME MediaGuard)
project(${PROJECT_NAME})

set(CMAKE_CURRENT_SOURCE_DIR ${CMAKE_SOURCE_DIR})
 
# ws2def.h重定义
if(WIN32)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  /DWIN32_LEAN_AND_MEAN")
endif()

# 追加CMake查找目录
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/cmake")

# 獲取項目的根路徑
message(STATUS "CMAKE ROOT: ${CMAKE_SOURCE_DIR}")
 
set(PROJECT_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}/src/include/)
message(${PROJECT_NAME} "PROJECT_INCLUDE_DIR: ${PROJECT_INCLUDE_DIR}")

set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)  

set(LOCAL_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/include)  

set(3RDPARTY_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/include)  

# HEADER END --------------------------------------------------------------------
  
if(WIN32)
	# 添加boost库依赖头文件
	include_directories("${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/pthreads")

    message("${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/pthreads") 
endif()

# 路徑和引用系統參數
IF(WIN32) # WIN32 版本 
    
    # 设置boost根目录
	set(BOOST_ROOT "c:/boost_1_63_0")
	# 设置boost库目录
	set(BOOST_LIBRARYDIR "c:/boost_1_63_0/stage/64")

    # opencv 4.9 改用 find_package(OpenCV REQUIRED)  
    # set(OpenCV_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/windows/x64/opencv4.9/include) 
    # set(OpenCV_LIBRARIES ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/windows/x64/opencv4.9/lib) 
    # 设置OpenCV的路径 以防環境參數沒設置導致find_package(OpenCV REQUIRED)沒找到 
	set(OpenCV_DIR "c:/opencv/build")

    # ffmpeg  4.2.2  改用 find_package(FFmpeg REQUIRED) 
    set(FFmpeg_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/windows/x64/ffmpeg/include)  
	set(FFmpeg_LIBRARY_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/windows/x64/ffmpeg/lib)  

    # openssl 已經編譯版本 openssl1.1.1b
    set(Openssl_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/openssl1.1.1b/include)
    set(Openssl_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/openssl1.1.1b/lib)

     # curl  
    set(Curl_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/curl/include)
    set(Curl_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/curl/lib)

    # easylogging  
    set(EaseLogging_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/easylogging)
    set(EaseLogging_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/windows/x64/easylogging)

    # rapidjson
    set(RAPIDJSON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/windows/x64/rapidjson/include)
    include_directories(${RAPIDJSON_INCLUDE_DIR}) 
 
elseif(UNIX) # LINUX 版本 

    # 设置boost根目录
	set(BOOST_ROOT /usr/local)
	# 设置boost库目录
	set(BOOST_LIBRARYDIR /usr/local/lib)


    # opencv 4.9 改用 find_package(OpenCV REQUIRED)  
    # set(${OpenCV_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/linux/x64/opencv4.9/include) 
    # set(OpenCV_LIBRARIES ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/linux/x64/opencv4.9/lib) 

    # ffmpeg 4.2.2 改用 find_package(FFmpeg REQUIRED) 
    set(FFmpeg_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/linux/x64/ffmpeg/include) 
	set(FFmpeg_LIBRARY_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/linux/x64/ffmpeg/lib) 

    # 需要openssl編譯版本 openssl-1.1.1q
    set(Openssl_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/openssl-1.1.1q/include)
    set(Openssl_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/openssl-1.1.1q/lib)
     
    # curl  
    set(Curl_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/curl/include)
    set(Curl_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/curl/lib)

    # easylogging  
    set(EaseLogging_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/easylogging)
    set(EaseLogging_LIBRARIES ${CMAKE_SOURCE_DIR}/3rdparty/linux/x64/easylogging)

    # rapidjson
    set(RAPIDJSON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/linux/x64/rapidjson/include)
    include_directories(${RAPIDJSON_INCLUDE_DIR}) 
 
endif()


# 只搜索上语句设置的搜索路径
set(Boost_NO_SYSTEM_PATHS ON)
# 设置使用静态库的boost库
set(Boost_USE_STATIC_LIBS ON)
# 打印boost搜索详情日志
set(Boost_DEBUG ON)

# 查找boost库
find_package(Boost COMPONENTS system filesystem regex date_time chrono serialization thread REQUIRED)
  
if(Boost_FOUND) 
    message(STATUS "Boost found: ${Boost_INCLUDE_DIRS}") 
    message(STATUS "Boost libraries: ${Boost_LIBRARIES}") 
else() 
    message(FATAL_ERROR "Boost not found!") 
endif()
# 查找opencv依赖
find_package(OpenCV REQUIRED)
 

# include local header files
include_directories(${PROJECT_INCLUDE_DIR}) 

# include 3RDPARTY_INCLUDE
include_directories(${3RDPARTY_INCLUDE}) 


# Include directories LOCAL_SOURCES_DIR 
file(GLOB  LOCAL_SOURCES_DIR
    "./src/*.cpp"
    "./src/hmac/*.cpp"
    "./src/httpserver/*.cpp"
    "./src/httpserver/*.cc"
    "./src/interface/*.cpp"
    "./src/include/Basic/*.cpp"
    "./src/include/Common/*.cpp"
    "./src/include/Config/*.cpp"
    "./src/include/easylogging/*.cpp"
    "./src/include/ErrorInfo/*.cpp"
    "./src/include/Http/*.cpp"
    "./src/include/Httplib/*.cpp"  
    "./src/log/*.cpp" 
    "./src/util/*.cpp" 

)

message(STATUS "\n================ LOCAL_SOURCES_DIR ============\n")
foreach(file ${LOCAL_SOURCES_DIR})
   message(${PROJECT_NAME} "*** LOCAL_SOURCES_DIR ***: ${file}") 
endforeach() 

file(GLOB LOCAL_HEADER_DIR 
    "./src/*.h"
    "./src//hmac/*.h"
    "./src//httpserver/*.h"
    "./src//include/Basic/*.h"
    "./src//include/Common/*.h"
    "./src//include/Config/*.h"
    "./src//include/easylogging/*.h"
    "./src//include/ErrorInfo/*.h"
    "./src//include/Http/*.h"
    "./src//include/Httplib/*.h"
    "./src//interface/*.h"
    "./src/log/*.h" 
    "./src/util/*.h" 
) 
message(STATUS "\n================ LOCAL_HEADER_DIR ============\n")
foreach(file ${LOCAL_HEADER_DIR})
   message(${PROJECT_NAME} "*** GLOB  LOCAL_HEADER_DIR ***:: ${file}") 
endforeach()
 
# opencv 4.8.1 來自 3rdParty的opencv的情況
#include_directories(${OpenCV_INCLUDE_DIRS}) 
#link_directories(${OpenCV_LIBRARY_DIRS})

# 添加opencv头文件 系統安裝opencv的情況 find_package 形式
include_directories( ${OpenCV_INCLUDE_DIRS} )

# ffmpeg 4.2.2
include_directories(${FFmpeg_INCLUDE_DIRS}) 
link_directories(${FFmpeg_LIBRARY_DIRS})

# Openssl 
include_directories(${Openssl_INCLUDE_DIRS}) 
link_directories(${Openssl_LIBRARIES})

# Curl
include_directories(${Curl_INCLUDE_DIRS}) 
link_directories(${Curl_LIBRARIES})  


# EaseLogging
include_directories(${EaseLogging_INCLUDE_DIRS}) 
link_directories(${EaseLogging_LIBRARIES}) 

# 系统日志头文件
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/spdlog-1.10.0/include")
  
# 添加boost头文件
include_directories(${Boost_INCLUDE_DIRS})
# 指定自定义boost的链接目录(非find_package自动查找到自定义库)
link_directories(${Boost_LIBRARY_DIRS})
 
 
# -------------------------------------------------------------------------------------------------------------
# 将源代码添加到此项目的可执行文件
add_executable(${PROJECT_NAME} ${LOCAL_SOURCES_DIR} ${LOCAL_HEADER_DIR})
# -------------------------------------------------------------------------------------------------------------

# target_compile_definitions 添加定义，这样可以防止特定宏冲突：
target_compile_definitions(${PROJECT_NAME} PRIVATE -D_SOME_MACRO_TO_PREVENT_CONFLICT)


# 以下的引用需要放在 add_executable 函數後面
 
# 设置包含目录，确保项目中可以找到头文件
target_include_directories(${PROJECT_NAME} PRIVATE ${LOCAL_INCLUDE_DIR})
 

# 设置 _ITERATOR_DEBUG_LEVEL 和编译选项
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _ITERATOR_DEBUG_LEVEL=2)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _ITERATOR_DEBUG_LEVEL=0)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
endif()

# 设置 _ITERATOR_DEBUG_LEVEL 和编译选项 if(CMAKE_BUILD_TYPE STREQUAL "Debug") target_compile_definitions(${PROJECT_NAME} PRIVATE _ITERATOR_DEBUG_LEVEL=2) set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g") elseif(CMAKE_BUILD_TYPE STREQUAL "Release") target_compile_definitions(${PROJECT_NAME} PRIVATE _ITERATOR_DEBUG_LEVEL=0) set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")

# 鏈接文件
# 鏈接 FFmpeg 庫   
# 鏈接 OpenCV 庫  
# 鏈接 OpenSSL 庫  

IF(WIN32)
    message("11111111111111111 -  WIN32 | MSVC")
     
    target_link_libraries(${PROJECT_NAME} PRIVATE

	    ${OpenCV_LIBS}
	    ${FFmpeg_LIBRARY_DIRS}
	    ${Openssl_LIBRARIES}
        ${Curl_LIBRARIES} 

        ${Boost_FILESYSTEM_LIBRARY}
	    ${Boost_SYSTEM_LIBRARY}
	    ${Boost_REGEX_LIBRARY}
	    ${Boost_CHRONO_LIBRARY}
	    ${Boost_SERIALIZATION_LIBRARY}
	    ${Boost_THREAD_LIBRARY}
	    ${Boost_DATE_TIME_LIBRARY}

        # FFmpeg
        avcodec.lib;
        avformat.lib;
        avutil.lib;
        swscale.lib;
        avdevice.lib;
        avfilter.lib;
        postproc.lib;
        swresample.lib;
        postproc.lib

        # opencv 
        opencv_core490.lib 
        opencv_imgcodecs490.lib
        opencv_imgproc490.lib
        

        # curl 
        libcrypto.lib;
        libssl.lib; 
        libcrypto_static.lib;
        libcurl_debug.lib
        # easylogging
        easylogging.lib;

    )

elseif(UNIX)
     message("11111111111111111 - UNIX") 

    # 複製過來的 需要改為LINUX版本
    target_link_libraries(${PROJECT_NAME} PRIVATE

	    ${OpenCV_LIBS}
	    ${FFmpeg_LIBRARY_DIRS}
	    ${Openssl_LIBRARIES}
        ${Curl_LIBRARIES}

        # FFmpeg
        avcodec.lib;
        avformat.lib;
        avutil.lib;
        swscale.lib;
        avdevice.lib;
        avfilter.lib;
        postproc.lib;
        swresample.lib;
        postproc.lib

        # opencv 
        opencv_core490.lib 
        opencv_imgcodecs490.lib
        opencv_imgproc490.lib
        

        # curl 
        libcrypto.lib;
        libssl.lib; 
        libcrypto_static.lib;
        libcurl_debug.lib
        # easylogging
        easylogging.lib;
    )
endif()

# 设置 exe 输出路径(exe输出到 dll 目录下)
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/output)
# 设置 exe 执行路径(运行时加载 dll )
# set(CMAKE_CURRENT_BINARY_DIR ${PROJECT_SOURCE_DIR}/3rdParty/bin)

message("=================== ${PROJECT_NAME} =======CMAKE SETTING BUILD END")
